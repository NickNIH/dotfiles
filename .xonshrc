import os
import re
import sys
import time
import shutil
import socket
import random
import subprocess

# Detect host.
host = socket.gethostname()

if host == 'ruby' or host == 'main':
  $bashrc_dir = $HOME + '/code/bash/dotfiles'
else:
  $bashrc_dir = $HOME + '/code/dotfiles'


##### Aliases #####

aliases['lsl']  = ['ls', '-lFhAb',  '--color=auto', '--group-directories-first']
aliases['lsld'] = ['ls', '-lFhAbd', '--color=auto', '--group-directories-first']
aliases['awkt'] = ['awk', '-F', '\t', '-v', "OFS='\t'"]
aliases['mv'] = ['mv', '-i']
aliases['cp'] = ['cp', '-i']
aliases['gitlast'] = ['git', 'log', '--oneline', '-n', '1']


##### Functions #####

def _wcc(args, stdin=None):
  if len(args) > 0:
    echo -n @(args[0]) | wc -c
  elif stdin is None:
    wc -c
  else:
    #TODO: Find a way to allow piping into wcc and have wc actually do the counting.
    chars=0
    for line in stdin:
      chars += len(line)
    print(chars)
aliases['wcc'] = _wcc
# readlink -f except it handles commands on the PATH too. Or, which, except it follows all links.
def _deref(args):
  name = args[0]
  if not os.path.exists(name):
    name = $(which @(name) 2> /dev/null)
  readlink -f @(name)
aliases['deref'] = _deref
# trash shortcut
if !(which trash-put > /dev/null 2> /dev/null):
  aliases['trash'] = 'trash-put'
else:
  def _trash(args):
    trash_dir = $HOME+'/.trash'
    if not os.path.isdir(trash_dir):
      if os.path.exists(trash_dir):
        return
      os.mkdir(trash_dir)
    for path in args:
      shutil.move(path, trash_dir)
  aliases['trash'] = _trash
# longurl.py shortcut
if !(which longurl.py > /dev/null 2> /dev/null):
  aliases['longurl'] = 'longurl.py -bc'
else:
  def _longurl():
    url=$(xclip -out -sel clip)
    print(url)
    curl -LIs @(url) | grep '^[Ll]ocation' | cut -d ' ' -f 2
  aliases['longurl'] = _longurl
# Walk up the process tree, finding the ancestor processes of the specified one.
# Or, if no PID is given, find the parents of this process.
def _parents(args):
  if len(args) == 0:
    pid = os.getpid()
  else:
    try:
      pid = int(args[0])
    except ValueError:
      return
  while pid > 0:
    ps -o comm= -p @(pid)
    pid = int($(ps -o ppid= -p @(pid)))
aliases['parents'] = _parents
# Print a random, valid MAC address.
def _randmac(args):
  octets = []
  octet = random.randint(0, 63)*4
  octets.append('{:02x}'.format(octet))
  for i in range(5):
    octet = random.randint(0, 255)
    octets.append('{:02x}'.format(octet))
  return ':'.join(octets)
aliases['randmac'] = lambda: print(_randmac(()))
# Format output of mount command to be easier to read.
def _mountf(args):
  print('Device                    Mount Point               Type')
  for line in $(mount).splitlines():
    fields = line.split()
    if len(fields) >= 5 and fields[1] == 'on' and fields[3] == 'type':
      print('{0:<25s} {2:<25s} {4:<25s}'.format(*fields))
aliases['mountf'] = _mountf
def _tc(args, stdin=None):
  import titlecase
  if len(args) > 1:
    line = ' '.join(args)
    print(titlecase.titlecase(line.lower()))
  else:
    for line in stdin:
      sys.stdout.write(titlecase.titlecase(line.lower()))
aliases['tc'] = _tc
# Automatically configure some options for youtube-dl
def _youtube(args):
  if len(args) == 0 or args[0] == '-h':
    sys.stderr.write('Usage: $ youtube url [title [quality]]\n')
    return 1
  url = args[0]
  url_fields = url.split(':')
  if len(url_fields) < 2 or not url_fields[1].startswith('//www.youtube.com/'):
    sys.stderr.write('Error: Invalid url or domain is not youtube.com (in url "{}").\n'.format(url))
    return 1
  title = '%(title)s'
  if len(args) >= 2:
    if args[1] == '-F':
      youtube-dl @(url) -F
      return
    else:
      title = args[1]
  quality_args = ()
  if len(args) >= 3:
    raw_quality = args[2]
    try:
      quality = int(raw_quality)
    except ValueError:
      fields = raw_quality.split('+')
      try:
        int(fields[0])
        int(fields[1])
      except (ValueError, IndexError):
        sys.stderr.write('Error: Invalid quality "{}".\n'.format(raw_quality))
        return 1
      quality = raw_quality
    if quality == 360 or quality == 640:
      quality_args = ('-f', 18)
    elif quality == 480:
      # 80k audio, 480p video
      quality_args = ('-f', '135+250')
    elif quality == 720 or quality == 1280:
      quality_args = ('-f', 22)
    else:
      quality_args = ('-f', quality)
  # First define the format and check the resulting filename.
  format = title+' [src %(uploader)s, %(uploader_id)s] [posted %(upload_date)s] [id %(id)s].%(ext)s'
  uploader_id = $(youtube-dl --get-filename @(url) -o '%(uploader_id)s' @(quality_args))
  if not re.search(r'^UC[a-zA-Z0-9_-]{22}$', uploader_id):
    sys.stderr.write('uploader_id "{}" looks like a username, not a channel id. Omitting channel id..\n'
                     .format(uploader_id.rstrip('\n')))
    format = title+' [src %(uploader_id)s] [posted %(upload_date)s] [id %(id)s].%(ext)s'
  youtube-dl --no-mtime @(url) -o @(format) @(quality_args)
aliases['youtube'] = _youtube


##### Bioinformatics #####

aliases['seqlen'] = ['bioawk', '-c', 'fastx', '{print $name, length($seq)}']
# Get some quality stats on a BAM using samtools.
def _bamsummary(args):
  for bam in args:
    print('\t'+bam+':')
    total = int($(samtools view -c @(bam)))
    digits = str(len(str(total)))
    format_str = '{:30s}{:6.2f}%  {:'+digits+'d}'
    def print_stat(label, reads):
      print(format_str.format(label+':', reads*100/total, reads))
    print(('{:39s}{:d}').format('total alignments:', total))
    print_stat('unmapped reads  (-f 4)', int($(samtools view -c -f 4 @(bam))))
    print_stat('not proper pair (-F 2)', int($(samtools view -c -F 2 @(bam))))
    print_stat('  MAPQ 0  alignments', total-int($(samtools view -c -q 1  @(bam))))
    print_stat('< MAPQ 20 alignments', total-int($(samtools view -c -q 20 @(bam))))
    print_stat('< MAPQ 30 alignments', total-int($(samtools view -c -q 30 @(bam))))
    print_stat('2ndary   alignments (-f 256)',  int($(samtools view -c -f 256  @(bam))))
    print_stat('chimeric alignments (-f 2048)', int($(samtools view -c -f 2048 @(bam))))
    print_stat('ambiguous alignments', int($(samtools view @(bam) | awk -F '\t' '$5 == 0' | grep -Ec '\tXA:Z:')))
aliases['bamsummary'] = _bamsummary
def _dna(args):
  LINE_LENGTH = 100
  length = 200
  if args:
    if args[0] == '-h':
      sys.stderr.write('Usage: $ dna [nbases]\nDefault number of bases: {}\n'.format(length))
      return 1
    try:
      length = int(args[0])
    except ValueError:
      sys.stderr.write('Error: Argument must be an integer number of bases (saw "{}" instead).\n'
                       .format(args[0]))
      return 1
  bases = []
  for i in range(length):
    bases.append(random.choice('ACGT'))
    if i % LINE_LENGTH == LINE_LENGTH - 1:
      print(''.join(bases))
      bases = []
  if bases:
    print(''.join(bases))
aliases['dna'] = _dna


##### Customize the prompt #####

# First, some functions to gather info that'll determine how the prompt looks.
def _set_ret_code():
  if len(__xonsh_history__.rtns) == 0:
    # New shell; there is no previous command.
    $RET_CODE = 0
  else:
    $RET_CODE = __xonsh_history__.rtns[-1]
_git_info = {'modified':None, 'branch':None}
def _gather_git_info():
  """Gather info on the git repo, if we're in one.
  This is all in one function so we only run the git command once (could take a while in large
  repos)."""
  try:
    output = subprocess.check_output(['git', 'status', '--short', '--branch'], stderr=subprocess.DEVNULL)
  except (subprocess.CalledProcessError, FileNotFoundError):
    # Not a git repo or git not installed.
    _git_info['modified'] = None
    _git_info['branch'] = None
    return
  _git_info['branch'] = ''
  _git_info['modified'] = False
  first_line = True
  for line in str(output, 'utf-8').splitlines():
    if first_line:
      if line.startswith('## '):
        _git_info['branch'] = line[3:].split('...')[0]
        first_line = False
    elif line.startswith(' M'):
      _git_info['modified'] = True
      break
# Determine colors and other strings to put in the prompt.
def _prompt_date_color():
  if $RET_CODE == 0:
    if remote:
      return '{NO_COLOR}'
    else:
      return '{CYAN}'
  else:
    return '{RED}'
def _prompt_host_color():
  if remote:
    return '{NO_COLOR}'
  else:
    return '{GREEN}'
def _prompt_path_color():
  if remote:
    return '{NO_COLOR}'
  elif _git_info['modified']:
    return '{YELLOW}'
  else:
    return '{GREEN}'
def _prompt_branch():
  branch = _git_info['branch']
  if branch is None or branch == 'master':
    return ''
  else:
    return branch+' '
def _prompt_date():
  return time.strftime("%a %b %d")
# Execute date-gathering functions that need to be run before prompt strings can be determined.
def _prompt_gather_data():
  _set_ret_code()
  _gather_git_info()
$PROMPT_FIELDS['gather_data'] = _prompt_gather_data
$PROMPT_FIELDS['date'] = _prompt_date
$PROMPT_FIELDS['date_color'] = _prompt_date_color
$PROMPT_FIELDS['host_color'] = _prompt_host_color
$PROMPT_FIELDS['path_color'] = _prompt_path_color
$PROMPT_FIELDS['branch'] = _prompt_branch
$PROMPT = ('{gather_data}{env_name:{} }{date_color}[{date}]{NO_COLOR} '
           '{host_color}{user}@{hostname}:{NO_COLOR} '
           '{path_color}{cwd}{NO_COLOR}\n{branch}>>> ')


##### Other #####

# A more "sophisticated" method for determining if we're in a remote shell.
# Check if the system supports the right ps parameters and if parents is able to climb the entire
# process hierarchy
def _is_remote():
  working_parents = False
  if $(ps -o comm= -p 1 > /dev/null 2> /dev/null):
    init = $(parents | tail -n 1).strip()
    if init == 'init' or init == 'systemd' or init == 'upstart':
      working_parents = true
  if working_parents:
    for process in $(parents).splitlines():
      if process == 'sshd' or process == 'slurmstepd':
        return True
  else:
    if 'SSH_CLIENT' in ${...} or 'SSH_TTY' in ${...}:
      return True
  return False
remote = _is_remote()

# Set window title.
if remote:
  # If we're on a remote server, put the server's name in the title.
  $TITLE = host
else:
  $TITLE = 'xonsh'
